// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Promociones.Infrastructure;

namespace Promociones.Infrastructure.Migrations
{
    [DbContext(typeof(PromocionContext))]
    partial class PromocionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Promociones.Domain.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Categorias");

                    b.HasData(
                        new { Id = 1, Descripcion = "Categoria 1" },
                        new { Id = 2, Descripcion = "Categoria 2" },
                        new { Id = 3, Descripcion = "Categoria 3" }
                    );
                });

            modelBuilder.Entity("Promociones.Domain.Entities.EntidadFinanciera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("EntidadesFinancieras");

                    b.HasData(
                        new { Id = 1, Descripcion = "Banco Galicia" },
                        new { Id = 2, Descripcion = "Banco Rio" }
                    );
                });

            modelBuilder.Entity("Promociones.Domain.Entities.MedioPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("MediosPago");

                    b.HasData(
                        new { Id = 1, Descripcion = "Tarjeta Visa Galicia Gold" },
                        new { Id = 2, Descripcion = "Tarjeta Amex Frances Platinium" },
                        new { Id = 3, Descripcion = "Efectivo Pesos" },
                        new { Id = 4, Descripcion = "Efectivo Dollar" }
                    );
                });

            modelBuilder.Entity("Promociones.Domain.Entities.Promocion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo");

                    b.Property<DateTime>("FechaCreacion");

                    b.Property<DateTime>("FechaFin");

                    b.Property<DateTime>("FechaInicio");

                    b.Property<DateTime?>("FechaModificacion");

                    b.Property<int?>("MaxCantidadDeCuotas");

                    b.Property<decimal?>("PorcentajeDecuento");

                    b.HasKey("Id");

                    b.ToTable("Promociones");
                });

            modelBuilder.Entity("Promociones.Domain.Entities.PromocionEntidadFinanciera", b =>
                {
                    b.Property<int>("PromocionId");

                    b.Property<int>("EntidadFinancieraId");

                    b.HasKey("PromocionId", "EntidadFinancieraId");

                    b.HasIndex("EntidadFinancieraId");

                    b.ToTable("PromocionesEntidadesFinancieras");
                });

            modelBuilder.Entity("Promociones.Domain.Entities.PromocionMedioPago", b =>
                {
                    b.Property<int>("PromocionId");

                    b.Property<int>("MedioPagoId");

                    b.HasKey("PromocionId", "MedioPagoId");

                    b.HasIndex("MedioPagoId");

                    b.ToTable("PromocionesMediosPago");
                });

            modelBuilder.Entity("Promociones.Domain.Entities.PromocionProductoCategoria", b =>
                {
                    b.Property<int>("PromocionId");

                    b.Property<int>("CategoriaId");

                    b.HasKey("PromocionId", "CategoriaId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("PromocionesProductosCategorias");
                });

            modelBuilder.Entity("Promociones.Domain.Entities.PromocionTipoMedioPago", b =>
                {
                    b.Property<int>("PromocionId");

                    b.Property<int>("TipoMedioPagoId");

                    b.HasKey("PromocionId", "TipoMedioPagoId");

                    b.HasIndex("TipoMedioPagoId");

                    b.ToTable("PromocionesTiposMedioPago");
                });

            modelBuilder.Entity("Promociones.Domain.Entities.TipoMedioPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TiposMedioPago");

                    b.HasData(
                        new { Id = 1, Descripcion = "Visa" },
                        new { Id = 2, Descripcion = "Amex" },
                        new { Id = 3, Descripcion = "Efectivo" }
                    );
                });

            modelBuilder.Entity("Promociones.Domain.Entities.PromocionEntidadFinanciera", b =>
                {
                    b.HasOne("Promociones.Domain.Entities.EntidadFinanciera")
                        .WithMany("PromocionesEntidadesFinancieras")
                        .HasForeignKey("EntidadFinancieraId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Promociones.Domain.Entities.Promocion")
                        .WithMany("PromocionEntidadesFinancieras")
                        .HasForeignKey("PromocionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Promociones.Domain.Entities.PromocionMedioPago", b =>
                {
                    b.HasOne("Promociones.Domain.Entities.MedioPago")
                        .WithMany("PromocionesMediosPago")
                        .HasForeignKey("MedioPagoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Promociones.Domain.Entities.Promocion")
                        .WithMany("PromocionMediosPago")
                        .HasForeignKey("PromocionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Promociones.Domain.Entities.PromocionProductoCategoria", b =>
                {
                    b.HasOne("Promociones.Domain.Entities.Categoria")
                        .WithMany("PromocionesProductosCategorias")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Promociones.Domain.Entities.Promocion")
                        .WithMany("PromocionProductoCategorias")
                        .HasForeignKey("PromocionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Promociones.Domain.Entities.PromocionTipoMedioPago", b =>
                {
                    b.HasOne("Promociones.Domain.Entities.Promocion")
                        .WithMany("PromocionTiposMedioPago")
                        .HasForeignKey("PromocionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Promociones.Domain.Entities.TipoMedioPago")
                        .WithMany("PromocionesTiposMedioPago")
                        .HasForeignKey("TipoMedioPagoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
